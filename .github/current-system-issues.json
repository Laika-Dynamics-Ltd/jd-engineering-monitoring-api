[
  {
    "title": "🔴 CRITICAL: Port 8000 Already in Use - Server Fails to Start",
    "body": "## Problem Description\nThe FastAPI server fails to start because port 8000 is already in use. This prevents local development and testing.\n\n```\nERROR: [Errno 48] error while attempting to bind on address ('0.0.0.0', 8000): address already in use\n```\n\n## Current Impact\n- Cannot run server locally for development\n- Blocks testing of new features\n- Forces manual port changes each time\n\n## Acceptance Criteria\n- [ ] Implement dynamic port allocation\n- [ ] Add port conflict detection\n- [ ] Support PORT environment variable\n- [ ] Add --port CLI argument support\n- [ ] Document port configuration options\n\n## Definition of Done\n- Server starts reliably without port conflicts\n- Port configurable via environment and CLI\n- Clear error messages when ports unavailable\n- Documentation updated\n\n## Relevant Files\n- `main.py` (line ~1560 - uvicorn.run)\n- `README.md` (add port configuration docs)\n\n**Time Estimate:** 2-4 hours",
    "labels": ["priority-critical", "backend", "deployment", "bug"],
    "assignees": []
  },
  {
    "title": "🔴 CRITICAL: PostgreSQL Connection Fails - SQLite Fallback Issues",
    "body": "## Problem Description\nPostgreSQL connection consistently fails with DNS errors, forcing SQLite fallback which may not scale for production.\n\n```\nWARNING: ⚠️ PostgreSQL connection failed: [Errno 8] nodename nor servname provided, or not known\n```\n\n## Current Impact\n- Production database not accessible\n- Using SQLite limits scalability\n- Data may be split between databases\n- Analytics queries may be slower\n\n## Root Cause Analysis\n- DATABASE_URL appears malformed or DNS issue\n- Connection pooling may be misconfigured\n- Railway environment variables not loading correctly\n\n## Acceptance Criteria\n- [ ] Fix PostgreSQL connection string parsing\n- [ ] Add connection retry logic with backoff\n- [ ] Implement proper connection pooling\n- [ ] Add database health monitoring\n- [ ] Create migration path from SQLite to PostgreSQL\n\n## Definition of Done\n- PostgreSQL connects reliably in production\n- Automatic failover with data integrity\n- Connection pool optimized for Railway\n- Database status visible in health endpoint\n\n## Relevant Files\n- `main.py` (lines 83-100 - lifespan function)\n- `.env.example` (add DATABASE_URL example)\n- `railway.json` (check environment config)\n\n**Time Estimate:** 1-2 days",
    "labels": ["priority-critical", "backend", "database", "bug", "deployment"],
    "assignees": []
  },
  {
    "title": "🟠 HIGH: Tablet Data Collection Intermittent - Connection Drops",
    "body": "## Problem Description\nTablet monitoring script shows intermittent connectivity issues, with consecutive failures and timeout errors. This leads to data gaps in monitoring.\n\n## Symptoms\n- Consecutive failures in tablet_client_bulletproof.py\n- API timeouts after 30 seconds\n- WiFi connectivity shows as 'unknown' frequently\n- Termux API commands fail randomly\n\n## Business Impact\n- Missing critical timeout events\n- Incomplete session tracking\n- False positive alerts\n- Reduced confidence in data\n\n## Acceptance Criteria\n- [ ] Implement local data buffering/queue\n- [ ] Add offline mode with sync capability\n- [ ] Improve WiFi detection logic\n- [ ] Add cellular fallback support\n- [ ] Implement exponential backoff properly\n- [ ] Add connection quality metrics\n\n## Definition of Done\n- 99% data delivery rate\n- Automatic recovery from network issues\n- No data loss during disconnections\n- Clear connectivity status reporting\n\n## Relevant Files\n- `scripts/tablet_client_bulletproof.py` (entire file)\n- `scripts/start_monitoring_simple.sh`\n- New: `scripts/data_buffer.py` (to create)\n\n**Time Estimate:** 3-4 days",
    "labels": ["priority-high", "mobile", "backend", "performance", "bug"],
    "assignees": []
  },
  {
    "title": "🟠 HIGH: Data Accuracy Issues - Validation Tests Failing",
    "body": "## Problem Description\nData accuracy validation script reveals multiple integrity issues that could lead to incorrect business decisions.\n\n## Test Results\n- Input validation: May accept invalid data\n- Database constraints: Not always enforced\n- Real-time accuracy: Timestamp mismatches\n- Data completeness: Potential data loss\n\n## Critical Issues Found\n1. Battery level can exceed 100% in database\n2. WiFi signal strength validation incorrect\n3. Timestamp inconsistencies between client/server\n4. Session events may be duplicated\n5. Device metrics missing required fields\n\n## Acceptance Criteria\n- [ ] Strengthen Pydantic validation models\n- [ ] Add database-level constraints\n- [ ] Implement data deduplication\n- [ ] Fix timezone handling\n- [ ] Add data integrity checksums\n- [ ] Create validation middleware\n\n## Definition of Done\n- 100% data accuracy test pass rate\n- All invalid data rejected at API level\n- Database constraints prevent bad data\n- Timezone handling consistent\n- Data integrity reports available\n\n## Relevant Files\n- `main.py` (Pydantic models lines 156-224)\n- `scripts/test_data_accuracy.py`\n- Database schema updates needed\n\n**Time Estimate:** 2-3 days",
    "labels": ["priority-high", "backend", "database", "testing", "bug"],
    "assignees": []
  },
  {
    "title": "🟡 MEDIUM: Dashboard Business Intelligence Not Loading Properly",
    "body": "## Problem Description\nBusiness Intelligence section shows loading states indefinitely and API endpoints return errors or incomplete data.\n\n## Issues Observed\n- `/analytics/business/myob-timeout-analysis` may timeout\n- `/analytics/ai/insights` returns generic responses\n- Charts don't render with real data\n- Executive summary shows placeholder text\n- Auto-refresh causes performance issues\n\n## User Impact\n- Cannot make data-driven decisions\n- Missing critical timeout patterns\n- No predictive analytics available\n- Manual data analysis required\n\n## Acceptance Criteria\n- [ ] Fix all analytics API endpoints\n- [ ] Implement proper data aggregation\n- [ ] Add caching for expensive queries\n- [ ] Create fallback data for empty states\n- [ ] Optimize auto-refresh performance\n- [ ] Add loading progress indicators\n\n## Definition of Done\n- All BI sections load within 3 seconds\n- Real data displayed in all charts\n- Predictive analytics functional\n- Auto-refresh doesn't impact UX\n- Error states handled gracefully\n\n## Relevant Files\n- `main.py` (analytics endpoints 1208-1494)\n- `static/dashboard_clean.html` (BI section)\n- Consider: Redis caching layer\n\n**Time Estimate:** 3-4 days",
    "labels": ["priority-medium", "frontend", "backend", "analytics", "performance"],
    "assignees": []
  },
  {
    "title": "🟡 MEDIUM: MYOB Session Detection Unreliable",
    "body": "## Problem Description\nMYOB application detection on tablets is inconsistent, leading to missed timeout events and incorrect session tracking.\n\n## Current Issues\n- Process name detection fails\n- MYOB shown as inactive when running\n- Session timeout alerts delayed\n- Multiple MYOB variants not detected\n\n## Technical Details\n```python\nmyob_patterns = ['myob', 'accountright', 'com.myob']\n# Missing: MYOB Advanced, MYOB Essentials, etc.\n```\n\n## Acceptance Criteria\n- [ ] Expand MYOB detection patterns\n- [ ] Add window manager detection\n- [ ] Implement activity monitoring API\n- [ ] Add manual MYOB status override\n- [ ] Create MYOB version detection\n- [ ] Add configurable timeout thresholds\n\n## Definition of Done\n- 99% accurate MYOB detection\n- All MYOB variants detected\n- Real-time session tracking\n- Configurable per-location timeouts\n- Testing on actual devices\n\n## Relevant Files\n- `scripts/tablet_client_bulletproof.py` (lines 140-155)\n- `scripts/tablet_client_working.py`\n- New: MYOB detection config file\n\n**Time Estimate:** 2-3 days",
    "labels": ["priority-medium", "mobile", "backend", "bug"],
    "assignees": []
  },
  {
    "title": "🟡 MEDIUM: Add Comprehensive Error Logging and Monitoring",
    "body": "## Problem Description\nCurrent error handling is basic, making it difficult to diagnose production issues. Need centralized logging and monitoring.\n\n## Current Limitations\n- Errors only logged to console\n- No error aggregation\n- Missing context in error messages\n- No alerting for critical errors\n- Tablet errors not centralized\n\n## Acceptance Criteria\n- [ ] Implement structured logging (JSON)\n- [ ] Add Sentry or similar error tracking\n- [ ] Create error dashboard\n- [ ] Add error rate monitoring\n- [ ] Implement log rotation\n- [ ] Add debug mode for tablets\n- [ ] Create error recovery playbooks\n\n## Definition of Done\n- All errors tracked centrally\n- Error alerts within 1 minute\n- Full error context available\n- Historical error analysis\n- Tablet debug logs accessible\n\n## Relevant Files\n- `main.py` (add error tracking)\n- `scripts/tablet_client_bulletproof.py`\n- New: `logging_config.py`\n- New: Error monitoring dashboard\n\n**Time Estimate:** 2-3 days",
    "labels": ["priority-medium", "backend", "deployment", "monitoring"],
    "assignees": []
  },
  {
    "title": "🟢 LOW: Implement Tablet Battery Optimization",
    "body": "## Problem Description\nTablet monitoring script runs continuously, potentially draining battery faster than necessary.\n\n## Current Behavior\n- Polls every 30 seconds regardless of activity\n- All sensors checked even when idle\n- No power-saving mode\n- WiFi constantly active\n\n## Proposed Optimizations\n- Adaptive polling intervals\n- Sensor batching\n- Idle mode detection\n- Battery saver integration\n- Wake lock management\n\n## Acceptance Criteria\n- [ ] Implement adaptive polling\n- [ ] Add battery saver mode\n- [ ] Reduce idle power consumption by 50%\n- [ ] Add power metrics reporting\n- [ ] Create battery optimization guide\n\n## Definition of Done\n- Battery lasts full 8-hour shift\n- Power usage metrics available\n- Configurable power modes\n- No impact on data accuracy\n\n## Relevant Files\n- `scripts/tablet_client_bulletproof.py`\n- New: `scripts/power_manager.py`\n- `TABLET_SETUP.md` (add battery tips)\n\n**Time Estimate:** 2 days",
    "labels": ["priority-low", "mobile", "performance", "enhancement"],
    "assignees": []
  },
  {
    "title": "🟢 LOW: Create Automated Deployment Pipeline",
    "body": "## Problem Description\nCurrent deployment is manual, increasing risk of errors and deployment time.\n\n## Current Process\n1. Manual code push\n2. Manual Railway deployment\n3. Manual tablet script updates\n4. No rollback procedure\n\n## Proposed Pipeline\n- GitHub Actions CI/CD\n- Automated testing\n- Railway auto-deploy\n- Tablet OTA updates\n- Blue-green deployment\n\n## Acceptance Criteria\n- [ ] Create GitHub Actions workflow\n- [ ] Add automated tests in pipeline\n- [ ] Configure Railway auto-deploy\n- [ ] Implement tablet update system\n- [ ] Add deployment rollback\n- [ ] Create deployment dashboard\n\n## Definition of Done\n- Push to main auto-deploys\n- All tests pass before deploy\n- Tablet updates within 1 hour\n- One-click rollback available\n- Deployment metrics tracked\n\n## Relevant Files\n- New: `.github/workflows/deploy.yml`\n- New: `scripts/tablet_updater.py`\n- `railway.json` (update config)\n- `DEPLOYMENT.md` (update docs)\n\n**Time Estimate:** 3-4 days",
    "labels": ["priority-low", "deployment", "automation", "enhancement"],
    "assignees": []
  },
  {
    "title": "🟡 MEDIUM: Add Real-time WebSocket Support for Live Updates",
    "body": "## Problem Description\nDashboard relies on polling for updates, causing delays and unnecessary server load. WebSocket support would enable real-time updates.\n\n## Current Issues\n- 30-second delay for new data\n- High server load from polling\n- Battery drain on viewing devices\n- Missed critical alerts\n\n## Proposed Solution\n- WebSocket endpoint for live data\n- Server-sent events fallback\n- Selective updates (only changed data)\n- Real-time alert push\n- Connection status indicator\n\n## Acceptance Criteria\n- [ ] Implement WebSocket endpoint\n- [ ] Add real-time data streaming\n- [ ] Update dashboard for WebSocket\n- [ ] Add connection retry logic\n- [ ] Implement data compression\n- [ ] Add WebSocket monitoring\n\n## Definition of Done\n- Updates appear within 1 second\n- 50% reduction in server load\n- Graceful fallback to polling\n- Connection status visible\n- Works on all devices\n\n## Relevant Files\n- `main.py` (add WebSocket support)\n- `static/dashboard_clean.html` (WebSocket client)\n- New: `websocket_manager.py`\n- Update: API documentation\n\n**Time Estimate:** 3-4 days",
    "labels": ["priority-medium", "backend", "frontend", "performance", "enhancement"],
    "assignees": []
  }
] 