version: '3.8'

services:
  # J&D McLennan Engineering Dashboard Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: jd-engineering-dashboard
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://dashboard_user:${DB_PASSWORD}@postgres:5432/dashboard_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - API_TOKEN=${API_TOKEN}
      - ALLOWED_HOSTS=localhost,127.0.0.1,${DOMAIN_NAME}
      - DB_POOL_SIZE=20
      - DB_MAX_CONNECTIONS=100
      - CACHE_TTL=300
      - API_RATE_LIMIT=100
      - METRICS_ENABLED=true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - jd_engineering_network
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.jd-mcllennan.service=dashboard"
      - "com.jd-mcllennan.environment=production"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jd-engineering-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=dashboard_db
      - POSTGRES_USER=dashboard_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - jd_engineering_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d dashboard_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - "com.jd-mcllennan.service=database"
      - "com.jd-mcllennan.environment=production"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jd-engineering-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - jd_engineering_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    labels:
      - "com.jd-mcllennan.service=cache"
      - "com.jd-mcllennan.environment=production"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jd-engineering-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - jd_engineering_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.jd-mcllennan.service=proxy"
      - "com.jd-mcllennan.environment=production"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: jd-engineering-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - jd_engineering_network
    labels:
      - "com.jd-mcllennan.service=monitoring"
      - "com.jd-mcllennan.environment=production"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: jd-engineering-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - jd_engineering_network
    labels:
      - "com.jd-mcllennan.service=visualization"
      - "com.jd-mcllennan.environment=production"

  # Log Aggregation (ELK Stack - Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: jd-engineering-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - jd_engineering_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "com.jd-mcllennan.service=logging"
      - "com.jd-mcllennan.environment=production"

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: jd-engineering-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - jd_engineering_network
    labels:
      - "com.jd-mcllennan.service=log-visualization"
      - "com.jd-mcllennan.environment=production"

# Networks
networks:
  jd_engineering_network:
    driver: bridge
    name: jd_engineering_network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: jd_engineering_postgres_data
  redis_data:
    driver: local
    name: jd_engineering_redis_data
  app_logs:
    driver: local
    name: jd_engineering_app_logs
  app_data:
    driver: local
    name: jd_engineering_app_data
  nginx_logs:
    driver: local
    name: jd_engineering_nginx_logs
  prometheus_data:
    driver: local
    name: jd_engineering_prometheus_data
  grafana_data:
    driver: local
    name: jd_engineering_grafana_data
  elasticsearch_data:
    driver: local
    name: jd_engineering_elasticsearch_data 